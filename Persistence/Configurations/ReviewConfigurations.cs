using Domain.Entities;
using Domain.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;

namespace Persistence.Configurations
{
    internal class ReviewConfigurations : IEntityTypeConfiguration<Domain.Entities.Review>
    {
        public void Configure(EntityTypeBuilder<Review> builder)
        {
            builder.Ignore(r => r.Id);
            #region Relationship Constrains
            builder.HasKey(r => new { r.CustomerId, r.ProductId });
            builder.HasOne(r => r.Product)
                   .WithMany(p => p.Reviews)
                   .HasForeignKey(r => r.ProductId);
            builder.HasOne(r => r.Customer)
                   .WithMany(c => c.Reviews)
                   .HasForeignKey(r=>r.CustomerId);
            #endregion

            #region Properties Constrains
            // Date Generated by the database
            builder.Property(r => r.Date)
                   .HasDefaultValueSql("GETDATE()");

            // Set the maximum value for Rate to 5
            builder.Property(r => r.Rate)
                   .HasDefaultValue(0)
                   .IsRequired()
                   .HasConversion(
                     v => Convert.ToInt32(v),
                     v => Convert.ToInt32(v))
                   .HasMaxLength(5)
                   .HasColumnType("int");
            builder.ToTable(r =>
            r.HasCheckConstraint("RateValidation",
                $"[{Properties.Rate.ToString()}] >= 0 and [{Properties.Rate.ToString()}] <= 5"));
            // Set the maximum length for Comment to 100 characters
            builder.Property(r => r.Comment)
                   .HasMaxLength(100);
            #endregion
        }
    }
}
